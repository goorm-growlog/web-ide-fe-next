import type { FileNode } from '../model/types'

export const mockFileTree: Record<string, FileNode> = {
  '/': {
    name: 'root',
    children: [
      '/src',
      '/public',
      '/README.md',
      '/package.json',
      '/empty-folder',
      '/.gitignore',
      '/.env',
      '/docs',
      '/test',
      '/dist',
    ],
    isFolder: true,
  },
  '/src': {
    name: 'src',
    children: [
      '/src/index.ts',
      '/src/main.ts',
      '/src/components',
      '/src/utils',
      '/src/pages',
      '/src/types',
    ],
    isFolder: true,
  },
  '/src/index.ts': { name: 'index.ts' },
  '/src/main.ts': { name: 'main.ts' },
  '/src/components': {
    name: 'components',
    children: [
      '/src/components/Button.tsx',
      '/src/components/Modal.tsx',
      '/src/components/Sidebar.tsx',
      '/src/components/Avatar.tsx',
    ],
    isFolder: true,
  },
  '/src/components/Button.tsx': { name: 'Button.tsx' },
  '/src/components/Modal.tsx': { name: 'Modal.tsx' },
  '/src/components/Sidebar.tsx': { name: 'Sidebar.tsx' },
  '/src/components/Avatar.tsx': { name: 'Avatar.tsx' },
  '/src/utils': {
    name: 'utils',
    children: ['/src/utils/helpers.ts', '/src/utils/constants.ts'],
    isFolder: true,
  },
  '/src/utils/helpers.ts': { name: 'helpers.ts' },
  '/src/utils/constants.ts': { name: 'constants.ts' },
  '/src/pages': {
    name: 'pages',
    children: [
      '/src/pages/home.tsx',
      '/src/pages/about.tsx',
      '/src/pages/contact.tsx',
    ],
    isFolder: true,
  },
  '/src/pages/home.tsx': { name: 'home.tsx' },
  '/src/pages/about.tsx': { name: 'about.tsx' },
  '/src/pages/contact.tsx': { name: 'contact.tsx' },
  '/src/types': {
    name: 'types',
    children: ['/src/types/global.d.ts'],
    isFolder: true,
  },
  '/src/types/global.d.ts': { name: 'global.d.ts' },
  '/public': {
    name: 'public',
    children: [
      '/public/favicon.ico',
      '/public/logo.svg',
      '/public/robots.txt',
      '/public/images',
    ],
    isFolder: true,
  },
  '/public/favicon.ico': { name: 'favicon.ico' },
  '/public/logo.svg': { name: 'logo.svg' },
  '/public/robots.txt': { name: 'robots.txt' },
  '/public/images': {
    name: 'images',
    children: ['/public/images/banner.png', '/public/images/avatar.jpg'],
    isFolder: true,
  },
  '/public/images/banner.png': { name: 'banner.png' },
  '/public/images/avatar.jpg': { name: 'avatar.jpg' },
  '/README.md': { name: 'README.md' },
  '/package.json': { name: 'package.json' },
  '/empty-folder': { name: 'empty-folder', children: [], isFolder: true },
  '/.gitignore': { name: '.gitignore' },
  '/.env': { name: '.env' },
  '/docs': {
    name: 'docs',
    children: ['/docs/architecture.md', '/docs/usage.md', '/docs/api.md'],
    isFolder: true,
  },
  '/docs/architecture.md': { name: 'architecture.md' },
  '/docs/usage.md': { name: 'usage.md' },
  '/docs/api.md': { name: 'api.md' },
  '/test': {
    name: 'test',
    children: ['/test/app.test.ts', '/test/utils.test.ts', '/test/__mocks__'],
    isFolder: true,
  },
  '/test/app.test.ts': { name: 'app.test.ts' },
  '/test/utils.test.ts': { name: 'utils.test.ts' },
  '/test/__mocks__': {
    name: '__mocks__',
    children: ['/test/__mocks__/file.mock.ts'],
    isFolder: true,
  },
  '/test/__mocks__/file.mock.ts': { name: 'file.mock.ts' },
  '/dist': {
    name: 'dist',
    children: ['/dist/bundle.js', '/dist/styles.css'],
    isFolder: true,
  },
  '/dist/bundle.js': { name: 'bundle.js' },
  '/dist/styles.css': { name: 'dist/styles.css' },
}
